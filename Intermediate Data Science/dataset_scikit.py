# -*- coding: utf-8 -*-
"""Dataset Scikit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eO99_V6bOw92yFwKW_eEuzlPE35s3Aoz
"""

from sklearn.datasets import load_iris

bunga = load_iris()
bunga

type(bunga)

dir(bunga)

print(bunga['DESCR'])

bunga['data']

bunga['target']

len(bunga['data'])

len(bunga['target'])

np.array(bunga['target']).reshape(len(bunga['target']),1)

import pandas as pd
import numpy as np

dataf = pd.DataFrame(
    data = np.append(
        bunga['data'],
        np.array(bunga['target']).reshape(len(bunga['target']),1),
        axis = 1),
    columns = np.append(bunga['feature_names'],['species'])
)

dataf

dataf['species'] = dataf['species'].astype('int64')
dataf

from sklearn.datasets import fetch_california_housing

house = fetch_california_housing()
type(house)

dir(house)

house['target'][:10]

import pandas as pd
import numpy as np

house_df = pd.DataFrame(
    data = np.append(house['data'], np.array(house['target']).reshape(len(house['target']),1),
        axis = 1),
    columns = np.append(house['feature_names'],['price'])
)

house_df

from sklearn.datasets import make_regression

features, target = make_regression(n_samples = 10, n_features = 1, random_state=10)
features, target

import matplotlib.pyplot as plt

plt.plot(features, target,'g*')
plt.show

X, y = make_regression(n_samples = 20, n_features=1, random_state=42, noise=5.0)

plt.plot (X,y, 'r.')
plt.show()

from sklearn.linear_model import LinearRegression

regression = LinearRegression()

regression.fit(X,y)

prediksi = regression.predict(X)

plt.plot(X, y, 'r.')
plt.plot(X, prediksi, 'b-')
plt.show()

from sklearn.preprocessing import MinMaxScaler

transformer = MinMaxScaler()
transformer.fit(X)

transformer.data_min_

transformer.data_max_

transform.fit(X)

scale = transformer.transform(X)
 scale

from sklearn.pipeline import Pipeline

X,y = make_regression(n_samples=20, n_features=1, random_state=10, noise=5.0)

pipeline = Pipeline([
    ('scale', MinMaxScaler()),
    ('regression', LinearRegression())
])

pipeline.fit(X,y)

prediksi = pipeline.predict(X)

plt.plot(X,y,'b.')
plt.plot(X,prediksi, 'r-')
plt.show()

from sklearn.metrics import mean_squared_error

mean_squared_error(y,prediksi)

pipeline.score(X,y)

