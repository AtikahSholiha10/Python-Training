# -*- coding: utf-8 -*-
"""Life Expectancy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Zq30kkY7WUPI-odvwKDtpgrVnrwfLrY
"""

import pandas as pd

data = pd.read_csv('life_expectancy_years.csv')
data.head()

data.info()

data.describe().transpose()

condition = data['country'] == 'United States'
data[condition]

us = data.iloc[178][1:].values
us

range(int(data.columns[1:].min()),int(data.columns[1:].max())+1)

data.columns[1:]

data.columns[1:].min()

data.columns[1:].max()

import numpy as np

years = np.array(range(int(data.columns[1:].min()),int(data.columns[1:].max())+1))
years

import matplotlib.pyplot as plt

plt.plot(years, us, 'b.')
plt.show()

df = pd.DataFrame()

df['Years']=years
df['Life Expectancy'] = us

df

from sklearn.model_selection import train_test_split

X=df[['Years']]
y=df['Life Expectancy']

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)

print('Original Data : ', X.shape)
print('Original Targer : ', y.shape)

print('Training Data : ', X_train.shape)
print('Training Targer : ', y_train.shape)

print('Testing Data : ', X_test.shape)
print('Testing Targer : ', y_test.shape)

X_train.head()

y_train.head()

X_test.head()

y_test.head()

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(X_train,y_train)

model.coef_, model.intercept_

prediksi = model.predict(X_test)
prediksi

y_test

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test, prediksi)
rmse = mean_squared_error(y_test, prediksi, squared=False)

print('Mean Squared Error : ',mse)
print('Root MSE : ',rmse)

import matplotlib.pyplot as plt

x_line = [[df['Years'].min()], [df['Years'].max()]]
y_line = model.predict(x_line)

plt.plot(X, y,'b.')
plt.plot(x_line, y_line,'r-')
plt.show()

SSres = ((y_test - prediksi)**2)
SSres

ss_res = SSres = ((y_test - prediksi)**2).sum(axis=0)
ss_res

y_mean= np.average(y_test, axis=0)
y_mean

SStot = ((y_test-y_mean)**2).sum(axis=0)
SStot

r2 = 1-(ss_res/SStot)
r2

from sklearn.metrics import r2_score

print(r2_score(y_test, prediksi))

