# -*- coding: utf-8 -*-
"""Polinomial Regresi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TVCUg-GYclvYTiPqhX_pkG0zr1J8S3m5
"""

from sklearn.datasets import load_diabetes

import pandas as pd
import numpy as np

data = load_diabetes()

df = pd.DataFrame(data.data, columns=data.feature_names)
df

df['Progression']=data.target
df

import matplotlib.pyplot as plt

plt.plot(df['bmi'],df['bp'],'b.')
plt.show()

X = df[['bmi']]
y = df['bp']

from sklearn.preprocessing import PolynomialFeatures

Poly = PolynomialFeatures(degree=10, include_bias=False)
X_poly = Poly.fit_transform(X)
X_poly

from sklearn.linear_model import LinearRegression

regresi = LinearRegression()
regresi.fit(X_poly,y)

from sklearn.linear_model import Ridge

regresi2 = Ridge()
regresi2.fit(X_poly, y)

from sklearn.linear_model import ElasticNet

regresi3 = ElasticNet(alpha=2.0, l1_ratio=0.5)
regresi3.fit(X_poly,y)

X_line_fitted = np.linspace(X.min(), X.max(), num=100)
y_line_fitted = regresi.intercept_

for i in range(len(Poly.powers_)):
  exponent = Poly.powers_[i][0]
  y_line_fitted = y_line_fitted + regresi.coef_[i] * (X_line_fitted**exponent)

X_line_fitted2 = np.linspace(X.min(), X.max(), num=100)
y_line_fitted2 = regresi2.intercept_

for i in range(len(Poly.powers_)):
  exponent = Poly.powers_[i][0]
  y_line_fitted2 = y_line_fitted2 + regresi2.coef_[i] * (X_line_fitted2**exponent)

X_line_fitted3 = np.linspace(X.min(), X.max(), num=100)
y_line_fitted3 = regresi3.intercept_

for i in range(len(Poly.powers_)):
  exponent = Poly.powers_[i][0]
  y_line_fitted3 = y_line_fitted3 + regresi3.coef_[i] * (X_line_fitted3**exponent)

plt.plot(X,y,'b.')

plt.plot(X_line_fitted3, y_line_fitted3)
plt.show()

plt.plot(X,y,'b.')

plt.plot(X_line_fitted2, y_line_fitted2)
plt.show()

plt.plot(X,y,'b.')

plt.plot(X_line_fitted, y_line_fitted)
plt.show()

#degree = 10

plt.plot(X,y,'b.')

plt.plot(X_line_fitted, y_line_fitted)
plt.show()

#degree = 5

plt.plot(X,y,'b.')

plt.plot(X_line_fitted, y_line_fitted)
plt.show()

#semakin degree rendah semakin simple

